# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.4 on Wed Sep 29 17:57:01 2021
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
import wx.aui
import wx.dataview
# end wxGlade


class CVEFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: CVEFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((825, 578))
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_OPEN, "Open Project", "")
        self.Bind(wx.EVT_MENU, self.open_project, id=wx.ID_OPEN)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Load Image", "")
        self.Bind(wx.EVT_MENU, self.load_image, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Generate Code", "")
        self.Bind(wx.EVT_MENU, self.generate_code, id=item.GetId())
        wxglade_tmp_menu.Append(wx.ID_SAVE, "Save project", "")
        self.Bind(wx.EVT_MENU, self.save_project, id=wx.ID_SAVE)
        wxglade_tmp_menu.Append(wx.ID_SAVEAS, "Save project as", "")
        self.Bind(wx.EVT_MENU, self.save_project_as, id=wx.ID_SAVEAS)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "Export Script", "")
        self.Bind(wx.EVT_MENU, self.export_script, id=item.GetId())
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_EXIT, "Exit", "")
        self.Bind(wx.EVT_MENU, self.exit, id=wx.ID_EXIT)
        self.frame_menubar.Append(wxglade_tmp_menu, "File")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.notebook = wx.aui.AuiNotebook(self, wx.ID_ANY)

        self.__set_properties()
        self.__do_layout()

        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: CVEFrame.__set_properties
        self.SetTitle("frame")
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CVEFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_1.Add(self.notebook, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def open_project(self, event):  # wxGlade: CVEFrame.<event_handler>
        print("Event handler 'open_project' not implemented!")
        event.Skip()

    def load_image(self, event):  # wxGlade: CVEFrame.<event_handler>
        print("Event handler 'load_image' not implemented!")
        event.Skip()

    def generate_code(self, event):  # wxGlade: CVEFrame.<event_handler>
        print("Event handler 'generate_code' not implemented!")
        event.Skip()

    def save_project(self, event):  # wxGlade: CVEFrame.<event_handler>
        print("Event handler 'save_project' not implemented!")
        event.Skip()

    def save_project_as(self, event):  # wxGlade: CVEFrame.<event_handler>
        print("Event handler 'save_project_as' not implemented!")
        event.Skip()

    def export_script(self, event):  # wxGlade: CVEFrame.<event_handler>
        print("Event handler 'export_script' not implemented!")
        event.Skip()

    def exit(self, event):  # wxGlade: CVEFrame.<event_handler>
        print("Event handler 'exit' not implemented!")
        event.Skip()

# end of class CVEFrame

class CodeDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: CodeDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((800, 500))
        self.text = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_DONTWRAP | wx.TE_LEFT | wx.TE_MULTILINE | wx.TE_READONLY)
        self.button_1 = wx.Button(self, wx.ID_OK, "")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: CodeDialog.__set_properties
        self.SetTitle("dialog")
        self.SetSize((800, 500))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: CodeDialog.__do_layout
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Generated Code"), wx.VERTICAL)
        sizer_6.Add(self.text, 1, wx.ALL | wx.EXPAND, 3)
        sizer_5.Add(sizer_6, 1, wx.ALL | wx.EXPAND, 3)
        sizer_5.Add(self.button_1, 0, wx.ALIGN_RIGHT | wx.ALL, 3)
        self.SetSizer(sizer_5)
        self.Layout()
        # end wxGlade

# end of class CodeDialog

class FunctionPaneBase(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: FunctionPaneBase.__init__
        kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.window_1 = wx.SplitterWindow(self, wx.ID_ANY)
        self.display_pane = wx.ScrolledWindow(self.window_1, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.results_bitmap = wx.StaticBitmap(self.display_pane, wx.ID_ANY, wx.Bitmap(32, 32))
        self.results_text = wx.TextCtrl(self.display_pane, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.results_matrix = wx.dataview.DataViewListCtrl(self.display_pane, wx.ID_ANY)
        self.params_pane = wx.ScrolledWindow(self.window_1, wx.ID_ANY, style=wx.TAB_TRAVERSAL)
        self.function_name = wx.StaticText(self.params_pane, wx.ID_ANY, "func_name")
        self.help_button = wx.Button(self.params_pane, wx.ID_ANY, "Help")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.show_function_help, self.help_button)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: FunctionPaneBase.__set_properties
        self.results_bitmap.Hide()
        self.results_text.Hide()
        self.results_matrix.Hide()
        self.display_pane.SetScrollRate(10, 10)
        self.params_pane.SetScrollRate(10, 10)
        self.window_1.SetMinimumPaneSize(200)
        self.window_1.SetSashGravity(1.0)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: FunctionPaneBase.__do_layout
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        self.params_sizer = wx.BoxSizer(wx.VERTICAL)
        sizer_3 = wx.StaticBoxSizer(wx.StaticBox(self.params_pane, wx.ID_ANY, "Results"), wx.HORIZONTAL)
        self.results_sizer = wx.FlexGridSizer(0, 2, 3, 3)
        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self.params_pane, wx.ID_ANY, "Parameters"), wx.HORIZONTAL)
        self.input_param_sizer = wx.FlexGridSizer(0, 2, 3, 3)
        sizer_2 = wx.StaticBoxSizer(wx.StaticBox(self.params_pane, wx.ID_ANY, "Function"), wx.HORIZONTAL)
        sizer_8 = wx.BoxSizer(wx.VERTICAL)
        sizer_8.Add(self.results_bitmap, 1, wx.ALL, 3)
        sizer_8.Add(self.results_text, 1, wx.ALL | wx.EXPAND, 3)
        sizer_8.Add(self.results_matrix, 1, wx.EXPAND, 0)
        self.display_pane.SetSizer(sizer_8)
        sizer_2.Add(self.function_name, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)
        sizer_2.Add(self.help_button, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALL, 3)
        self.params_sizer.Add(sizer_2, 0, wx.ALL | wx.EXPAND, 3)
        self.input_param_sizer.AddGrowableCol(1)
        sizer_4.Add(self.input_param_sizer, 1, wx.EXPAND, 0)
        self.params_sizer.Add(sizer_4, 1, wx.ALL | wx.EXPAND, 3)
        self.results_sizer.AddGrowableCol(1)
        sizer_3.Add(self.results_sizer, 0, wx.EXPAND, 0)
        self.params_sizer.Add(sizer_3, 1, wx.ALL | wx.EXPAND, 3)
        self.params_pane.SetSizer(self.params_sizer)
        self.window_1.SplitVertically(self.display_pane, self.params_pane)
        sizer_7.Add(self.window_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_7)
        sizer_7.Fit(self)
        self.Layout()
        # end wxGlade

    def show_function_help(self, event):  # wxGlade: FunctionPaneBase.<event_handler>
        print("Event handler 'show_function_help' not implemented!")
        event.Skip()

# end of class FunctionPaneBase

class WrapperBase(wx.Panel):
    def __init__(self, *args, **kwds):
        # begin wxGlade: WrapperBase.__init__
        kwds["style"] = kwds.get("style", 0) | wx.TAB_TRAVERSAL
        wx.Panel.__init__(self, *args, **kwds)
        self.toggle_code = wx.ToggleButton(self, wx.ID_ANY, "{}", style=wx.BU_EXACTFIT)
        self.code = wx.TextCtrl(self, wx.ID_ANY, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOGGLEBUTTON, self.show_code, self.toggle_code)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: WrapperBase.__set_properties
        self.code.Hide()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: WrapperBase.__do_layout
        self.sizer = wx.BoxSizer(wx.HORIZONTAL)
        self.sizer.Add(self.toggle_code, 0, wx.ALL, 3)
        self.sizer.Add(self.code, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 3)
        self.SetSizer(self.sizer)
        self.sizer.Fit(self)
        self.Layout()
        # end wxGlade

    def show_code(self, event):  # wxGlade: WrapperBase.<event_handler>
        print("Event handler 'show_code' not implemented!")
        event.Skip()

# end of class WrapperBase
